// Breakpoint widths
$bp-ss: 320px !default; // minimum size
$bp-xs: 360px !default; // older phone, iphone se
$bp-sm: 480px !default; // Small screen / phone
$bp-md: 600px !default; // Small screen / phone
$bp-lg: 720px !default; // Medium screen / tablet
$bp-xl: 960px !default; // Large screen / desktop
$bp-x2: 1200px !default; // Extra large screen / wide desktop
$bp-x3: 1440px !default; // Extra large screen / wide desktop
$bp-x4: 1680px !default; // Extra large screen / wide desktop
$bp-x5: 1920px !default; // Extra large screen / wide desktop

$breakpoints: (
  xs: $bp-xs,
  sm: $bp-sm,
  md: $bp-md,
  lg: $bp-lg,
  xl: $bp-xl,
  x2: $bp-x2,
  x3: $bp-x3,
  x4: $bp-x4,
  x5: $bp-x5,
) !default;

@function bp-size($key) {
  $val: map-get($breakpoints, $key);
  // prettier-ignore
  @if $val { @return $val; }

  @warn "custom screen size `#{$key}` is not recommended";
  @return $key;
}

@mixin bp-min($min: sm) {
  @if $min == null or $min == xs {
    @content;
  } @else {
    $size: bp-size($min);
    @media screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin bp-max($max: xl) {
  @if $max == null {
    @content;
  } @else {
    $size: bp-size($max) - 1px;
    @media screen and (max-width: $size) {
      @content;
    }
  }
}

@mixin bp-minmax($min: sm, $max: xl) {
  $size-min: bp-size($min);
  $size-max: bp-size($max) - 1px;
  @media screen and (min-width: $size-min) and (max-width: $size-max) {
    @content;
  }
}

@mixin bps(
  $props,
  $xs: null,
  $sm: null,
  $md: null,
  $lg: null,
  $xl: null,
  $x2: null,
  $x3: null,
  $x4: null,
  $x5: null
) {
  $map: $xs;

  @if type-of($map) != map {
    $map: (
      xs: $xs or null,
      sm: $sm or null,
      md: $md or null,
      lg: $lg or null,
      xl: $xl or null,
      x2: $x2 or null,
      x3: $x3 or null,
      x4: $x4 or null,
      x5: $x5 or null,
    );
  }

  $old: null;

  @if type-of($props) != list {
    $props: ($props);
  }

  @each $key, $val in $map {
    @if ($val and $val != $old) {
      @include bp-min($key) {
        @each $prop in $props {
          #{$prop}: $val;
        }
      }
    }

    $old: $val;
  }
}
