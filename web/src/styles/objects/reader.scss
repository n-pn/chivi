@use '../essence' as *;

.reader {
  @include bps(
    --head-fs,
    rem(22px),
    rem(23px),
    rem(24px),
    rem(26px),
    rem(28px)
  );

  &.app-fs-1 {
    @include bps(
      --para-fs,
      rem(15px),
      rem(16px),
      rem(17px),
      rem(18px),
      rem(19px)
    );

    @include bps(
      --head-fs,
      rem(21px),
      rem(22px),
      rem(23px),
      rem(25px),
      rem(27px)
    );
  }

  &.app-fs-2 {
    @include bps(
      --para-fs,
      rem(16px),
      rem(17px),
      rem(18px),
      rem(19px),
      rem(20px)
    );
  }

  &.app-fs-3 {
    @include bps(
      --para-fs,
      rem(17px),
      rem(18px),
      rem(19px),
      rem(20px),
      rem(21px)
    );
  }

  &.app-fs-4 {
    @include bps(
      --para-fs,
      rem(19px),
      rem(20px),
      rem(21px),
      rem(22px),
      rem(23px)
    );
  }

  &.app-fs-5 {
    @include bps(
      --para-fs,
      rem(21px),
      rem(22px),
      rem(23px),
      rem(24px),
      rem(25px)
    );

    @include bps(
      --head-fs,
      rem(23px),
      rem(24px),
      rem(25px),
      rem(26px),
      rem(29px)
    );
  }
}

.cv-line,
.cdata {
  display: block;

  color: var(--fgcolor, var(--fg-main));

  .app-ff-1 & {
    font-family: var(--font-sans);
  }

  .app-ff-2 & {
    font-family: var(--font-serif);
  }

  .app-ff-3 & {
    font-family: Nunito Sans, var(--font-sans);
  }

  .app-ff-4 & {
    font-family: Lora, var(--font-serif);
  }

  .app-ff-5 & {
    font-family: Roboto Slab, var(--font-serif);
  }

  &.focus {
    @include bdradi();
    // outline: 1px solid color(primary, 5, 5);

    .tm-light & {
      @include bgcolor(warning, 2, 2);
    }
    .tm-warm & {
      @include bgcolor(warning, 2, 2);
    }
    .tm-dark & {
      @include bgcolor(primary, 8, 2);
    }
    .tm-oled & {
      @include bgcolor(primary, 8, 2);
    }
  }
}

h1.cv-line,
h1.cdata {
  line-height: 1.4em;
  margin: 1em 0;
  font-size: var(--head-fs);
}

p.cv-line,
p.cdata {
  margin: 1em 0;
  text-align: justify;
  text-justify: auto;
  line-height: var(--textlh, 160%);
  font-size: var(--para-fs);
}

@mixin cv-node($color: blue) {
  cursor: pointer;
  // position: relative;

  @include tm-light(false) {
    --active: #{color($color, 6)};
    --border: #{color($color, 4)};
  }

  @include tm-dark(false) {
    --active: #{color($color, 4)};
    --border: #{color($color, 6)};
  }
}

x-n {
  background-position: bottom bottom;

  // unknown
  &[d='0'] {
    @include cv-node(success);
  }

  // primary
  &[d='1'] {
    @include cv-node(warning);
  }

  // regular
  &[d='2'] {
    @include cv-node(primary);
  }

  // hintpri
  &[d='3'] {
    @include cv-node(harmful);
  }

  // hintreg
  &[d='4'] {
    @include cv-node(teal);
  }

  // autogen
  &[d='5'] {
    @include cv-node(purple);
  }

  // essence + fixture
  &[d='6'] {
    @include cv-node(neutral);
  }
}

x-g {
  --color: #{color(neutral, 5, 8)};

  $colors: (red, orange, yellow, green, blue, indigo, purple);

  @for $index from 1 through 7 {
    $color: nth($colors, $index);
    &[l='#{$index}'] {
      --color: #{color($color, 5, 8)};
    }
  }

  &:before,
  &:after {
    font-size: smaller;
    vertical-align: top;
    color: var(--color);
  }

  &:before {
    content: '(';
  }

  &:after {
    content: ')';
  }
}

x-c {
  @include cv-node(gray);
  color: var(--active);
  font-size: 0.9em;
  text-transform: uppercase;

  &:hover {
    border-bottom: 1px solid var(--border);
  }

  &:after {
    padding: 0 0.25rem;
    @include ftsize(xs);
  }
}

x-z {
  font-family: Roboto, Noto Sans CJK, 'Microsoft Yahei', STXihei, sans-serif;
  @include cv-node(gray);
  @include cv-node(primary);

  &:hover {
    color: var(--active);
  }
}

x-n {
  .cdata:hover &,
  .cdata.focus &,
  &:hover {
    border-bottom: 1px solid var(--border);
    background: none;
    // background: linear-gradient(to top, var(--border) 0.75px, transparent 0);
  }

  &:hover,
  &.hover {
    color: var(--active);
  }

  &:after {
    padding: 0 0.25rem;
  }

  // &.focus {
  //   @include fgcolor(secd);
  //   background: color(success, 5, 2) !important;
  //   .tm-dark & {
  //     background: color(purple, 4, 3) !important;
  //   }
  //   .tm-oled & {
  //     background: color(purple, 4, 4) !important;
  //   }
  // }

  // c-g & {
  //   cursor: pointer;
  //   // prettier-ignore
  //   &:hover, &.hover, &.focus { color: var(--active); }
  // }
}

// prettier-ignore
// @mixin vg-wrap($left: '{', $right: '}') {
//   &:before, &:after { font-style: normal; }
//   &:before { content: $left; }
//   &:after { content: $right; }
// }

// v-g {
//   --vgcolor: var(--fgmain);

//   .cdata.debug & {
//     background: none !important;

//     // prettier-ignore
//     &:before, &:after { color: var(--vgcolor); }
//     @include vg-wrap('[', ']');

//     v-n {
//       color: var(--vgcolor);
//       // prettier-ignore
//       &:hover { color: var(--active); }
//     }
//   }

//   &[d='0'],
//   &[d='1'] {
//     @include vg-wrap('', '');
//   }

//   $colors: (gray, green, blue, teal, orange, fuchsia, purple, pink, red);

//   @for $i from 1 through 9 {
//     &[d='#{$i}'] {
//       $color: list.nth($colors, $i);
//       --vgcolor: #{color($color, 5)};
//     }
//   }
// }
