@use '../essence' as *;

article {
  padding: 1rem 0;
  overflow-wrap: break-word;
}

.article {
  @include shadow(2);
  @include bgcolor(tert);
  @include padding-x(var(--gutter));

  @include tm-dark($svelte: false) {
    @include linesd(--bd-soft, $inset: true);
  }
}

.md-post {
  margin-top: 1rem;
  font-size: em(17px);
  line-height: 1.5em;

  @include bp-min(ls) {
    @include padding-x(2rem);
  }

  > * + * {
    margin-top: 1.25rem;
  }

  h1 {
    padding-top: 0.5rem;
    margin-bottom: 1.5rem;
    @include border(--bd-main, $loc: bottom);
  }

  h1,
  h2 {
    font-weight: 400;
  }

  h2,
  h3 {
    padding-top: 0.5rem;
    @include fgcolor(secd);
    @include border(--bd-soft, $loc: bottom);
  }

  h4,
  h5 {
    @include fgcolor(tert);
  }

  ul > * + *,
  ol > * + * {
    margin-top: 1rem;
  }

  li > * {
    margin-top: 0.75rem;
  }

  a {
    @include fgcolor(primary, 5);
  }

  .sm {
    @include ftsize(sm);
    line-height: 1.25rem;
    @include fgcolor(secd);
  }

  .em {
    font-style: italic;
    @include fgcolor(warning, 5);
  }

  pre.language-zh {
    line-height: 1.25rem;
    font-size: rem(14px);
  }
}

x-t,
x-p,
x-v {
  display: inline-block;
  padding: 0 0.5em;
  letter-spacing: 0.04em;
  font-weight: 500;
  text-transform: capitalize;
  font-size: rem(13px);
  @include linesd(--bd-main);
}

x-t {
  @include bdradi();
}

cv-user,
.cv-user {
  font-weight: 500;
  color: var(--color, #{color(neutral, 5)});

  &[data-privi='-1'] {
    text-decoration: line-through;
  }

  &[data-privi='0'] {
    --color: #{color(neutral, 5)};
  }

  &[data-privi='1'] {
    --color: #{color(success, 5)};
  }

  &[data-privi='2'] {
    --color: #{color(primary, 5)};
  }

  &[data-privi='3'] {
    --color: #{color(warning, 5)};
  }

  &[data-privi='4'] {
    --color: #{color(harmful, 5)};
  }

  &[data-privi='5'] {
    --color: #{color(purple, 5)};
  }
}

.bread {
  display: flow-root;

  padding: 0.5rem 0;
  line-height: 1.25rem;
  margin: 0.25rem 0;

  @include ftsize(sm);
  @include fgcolor(secd);
}

.crumb {
  @include fgcolor(tert);

  &._caps {
    text-transform: uppercase;
    @include ftsize(xs);
  }

  &._link {
    &:hover {
      @include fgcolor(primary, 5);
    }
  }

  svg {
    height: 1rem;
    width: 1rem;
    vertical-align: text-top;
  }
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  /* display: none; <- Crashes Chrome on hover */
  -webkit-appearance: none;
  margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
}

input[type='number'] {
  appearance: textfield;
}

@mixin cv-node($color: blue) {
  cursor: pointer;
  // position: relative;

  @include tm-light(false) {
    --active: #{color($color, 6)};
    --border: #{color($color, 4)};
  }

  @include tm-dark(false) {
    --active: #{color($color, 4)};
    --border: #{color($color, 6)};
  }
}

x-n {
  background-position: bottom bottom;

  .cv-line:hover &,
  .cv-line.focus &,
  .cv-line.debug &,
  &:hover {
    background: linear-gradient(to top, var(--border) 0.75px, transparent 0);
  }

  // &:hover {
  //   position: relative;
  //   &::after {
  //     @include fgcolor(tert);
  //     @include bgcolor(tert, 0.5);

  //     position: absolute;
  //     top: -40%;
  //     left: 0;
  //     right: 0;
  //     display: inline-flex;
  //     flex-wrap: nowrap;
  //     justify-content: center;
  //     min-width: 4em;
  //     line-height: 1em;
  //     font-size: 0.6em;

  //     content: attr(z) ' (' attr(p) ')';
  //   }
  // }

  // essence + fixture
  &[d='1'] {
    @include cv-node(purple);
  }

  // unique
  &[d='2'] {
    @include cv-node(teal);
  }

  // regular
  &[d='3'] {
    @include cv-node(primary);
  }

  // suggest
  &[d='4'] {
    @include cv-node(success);
  }

  // autogen
  &[data-d='5'] {
    @include cv-node(warning);
  }

  &:hover,
  &.hover {
    color: var(--active);
  }

  // prettier-ignore
  &.focus {
    @include fgcolor(secd);
    background: color(success, 5, 2) !important;
    .tm-dark & { background: color(purple, 4, 3) !important; }
    .tm-oled & { background: color(purple, 4, 4) !important; }
  }

  // c-g & {
  //   cursor: pointer;
  //   // prettier-ignore
  //   &:hover, &.hover, &.focus { color: var(--active); }
  // }
}

// prettier-ignore
// @mixin vg-wrap($left: '{', $right: '}') {
//   &:before, &:after { font-style: normal; }
//   &:before { content: $left; }
//   &:after { content: $right; }
// }

// v-g {
//   --vgcolor: var(--fgmain);

//   .cv-line.debug & {
//     background: none !important;

//     // prettier-ignore
//     &:before, &:after { color: var(--vgcolor); }
//     @include vg-wrap('[', ']');

//     v-n {
//       color: var(--vgcolor);
//       // prettier-ignore
//       &:hover { color: var(--active); }
//     }
//   }

//   &[d='0'],
//   &[d='1'] {
//     @include vg-wrap('', '');
//   }

//   $colors: (gray, green, blue, teal, orange, fuchsia, purple, pink, red);

//   @for $i from 1 through 9 {
//     &[d='#{$i}'] {
//       $color: list.nth($colors, $i);
//       --vgcolor: #{color($color, 5)};
//     }
//   }
// }
