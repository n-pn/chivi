@use './util' as *;

// Breakpoint widths
$bp-phone-sm: rem(320px) !default; // minimum size
$bp-phone-md: rem(360px) !default; // older phone, iphone se
$bp-phone-lg: rem(480px) !default; // Small screen / phone
$bp-tablet-sm: rem(600px) !default; // Small screen / phone
$bp-tablet-md: rem(720px) !default; // Medium screen / tablet
$bp-tablet-lg: rem(840px) !default; // Medium screen / tablet
$bp-laptop-sm: rem(960px) !default; // Large screen / desktop
$bp-laptop-md: rem(1200px) !default; // Extra large screen / wide desktop
$bp-laptop-lg: rem(1440px) !default; // Extra large screen / wide desktop
$bp-desktop-sm: rem(1680px) !default; // Extra large screen / wide desktop
$bp-desktop-md: rem(1920px) !default; // Extra large screen / wide desktop
$bp-desktop-lg: rem(2160px) !default; // Extra large screen / wide desktop

$breakpoints: (
  ps: $bp-phone-sm,
  pm: $bp-phone-md,
  pl: $bp-phone-lg,
  ts: $bp-tablet-sm,
  tm: $bp-tablet-md,
  tl: $bp-tablet-lg,
  ls: $bp-laptop-sm,
  lm: $bp-laptop-md,
  ll: $bp-laptop-lg,
  ds: $bp-desktop-sm,
  dm: $bp-desktop-md,
  dl: $bp-desktop-lg,
) !default;

@function bp-size($key) {
  $val: map-get($breakpoints, $key);
  // prettier-ignore
  @if $val { @return $val; }

  // @warn "custom screen size `#{$key}` is not recommended";
  @return $key;
}

@mixin bp-min($min: pm) {
  @if $min == null or $min == ps {
    @content;
  } @else {
    $size: bp-size($min);
    @media screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin bp-max($max: dm) {
  @if $max == null {
    @content;
  } @else {
    $size: bp-size($max) - rem(1px);
    @media screen and (max-width: $size) {
      @content;
    }
  }
}

@mixin bp-minmax($min: sm, $max: dm) {
  $size-min: bp-size($min);
  $size-max: bp-size($max) - rem(1px);
  @media screen and (min-width: $size-min) and (max-width: $size-max) {
    @content;
  }
}

// prettier-ignore
@mixin bps($props,
  $ps: null, $pm: null, $pl: null,
  $ts: null, $tm: null, $tl: null,
  $ls: null, $lm: null, $ll: null,
  $ds: null, $dm: null, $dl: null,
) {
  $map: $ps;

  @if type-of($map) != map {
    $map: (
      ps: $ps or null, pm: $pm or null, pl: $pl or null,
      ts: $ts or null, tm: $tm or null, tl: $tl or null,
      ls: $ls or null, lm: $lm or null, ll: $ll or null,
      ds: $ds or null, dm: $dm or null, dl: $dl or null,
    );
  }

  $old: null;

  @if type-of($props) != list {
    $props: ($props);
  }

  @each $key, $val in $map {
    @if ($val and $val != $old) {
      @include bp-min($key) {
        @each $prop in $props {
          #{$prop}: $val;
        }
      }
    }

    $old: $val;
  }
}
