require "crorm"
require "crorm/sqlite3"

class M2::DbRule
  # enum Kind
  #   Morp
  #   Word
  #   Phrase
  # end

  #####

  include Crorm::Model
  @@table = "rules"

  field id : Int32, primary: true

  field rule : String    # rule array
  field size : Int32 = 0 # array of rule
  field prio : Int32 = 5 # rule ranking

  field desc : String = "" # description
  field note : String = "" # extra note

  field ptag : Int32 = 0 # ptag id
  # 0 => combine, 1 => replace, 2 => promote, 3.. => unique rule
  field kind : Int32 = 0

  field _combine : String = "" # array of new indexes of items in rule array
  field _replace : String = "" # create new db_term with meaning generated by this

  field uname : String = ""
  field mtime : Int64 = Time.utc.to_unix

  field _flag : Int32 = 0

  def save!(repo = self.class.repo)
    repo.open_db do |db|
      fields, changes = self.get_changes
      db.insert(@@table, fields, changes) rescue nil
    end
  end

  ###########

  class_getter repo : SQ3::Repo { SQ3::Repo.new(self.db_path, self.init_sql) }

  @[AlwaysInline]
  def self.db_path
    "var/dicts/v2raw/rules_v2.db"
  end

  def self.init_sql
    {{ read_file("#{__DIR__}/sql/rules_v2.sql") }}
  end
end
